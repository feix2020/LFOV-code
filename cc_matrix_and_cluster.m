% calculating cc matrix for fig2

% Dependencies:
% mask and region_map_t are generated by: mask_and_register.mat

% load DAT data
clear;clc
myPath = 'D:\demo';
cd(myPath)
rawData = [];
allFileName = dir(fullfile(myPath, '*.dat'));
for i = 1:size(allFileName,1)
    fn = fullfile(myPath,allFileName(i).name);
    matdata = DAT2mat_x(fn);
    rawData = cat(3, rawData, matdata);
    clear matdata
end
msg = 'loaded all imaging data'


% df/f
avg_img = squeeze(mean(rawData,3));
df = double(rawData);
for i = 1:size(rawData,3)
    df(:,:,i) = (double(squeeze(df(:,:,i)))-avg_img)./avg_img;
end

% gsr
frames = reshape(df,[size(df,1)*size(df,2),size(df,3)]);
frames = frames';
mean_g = mean(frames, 2);
g_plus = squeeze(pinv(mean_g));
beta_g = g_plus * frames;
global_signal = mean_g * beta_g;
df470gsr = frames - global_signal;
df = reshape(df470gsr',[size(df,1) size(df,2) size(df,3)]);

% mask
% find mask in -3
load('mask.mat')
load('mask_map.mat')
temp = repmat(~mask,[1 1 size(df,3)]);
df = df.*temp;
df0 = reshape(df, [size(df,1)*size(df,2) size(df,3)]);
df2 = df0;

% region grid
region_mask = region_map_t>0;
bbox = regionprops(region_mask, 'BoundingBox');
bbox = bbox.BoundingBox;


grid_num = 16;   % the number to grid
%grid_num = 32;
x0 = bbox(1);
y0 = bbox(2);
dx = bbox(3)/grid_num;
dy = bbox(4)/grid_num;
mm_idx1 = [];
df_temp = [];
% mean signal for each area
for xi = 1:grid_num
    xc = ceil(x0+(xi-1)*dx);
    xc2 = floor(x0+xi*dx);
    for yi = 1:grid_num
        temp = region_mask*0;
        yc = ceil(y0+(yi-1)*dy);
        yc2 = floor(y0+yi*dy);
        temp(yc:yc2,xc:xc2) = 1;
        idx = temp.*((region_map_t>0).*(~mask));
        idx = find(idx>0);
        if ~isempty(idx)
            df_temp((xi-1)*grid_num+yi,:) = mean(df2(idx,:));
            mm_idx1((xi-1)*grid_num+yi) = 1;
        else
            df_temp((xi-1)*grid_num+yi,:) = zeros(1,size(df2,2));
            mm_idx1((xi-1)*grid_num+yi) = 0;
            %yi
        end
        
        imagesc(temp)
        drawnow
        %pause(0.2)
    end
    xi
end

% calc cc
grid_cc = [];
for xi = 1:size(df_temp,1)
    for yi = xi:size(df_temp,1)
        temp = sum(df_temp(xi,:))*sum(df_temp(yi,:));
        if ~(temp==0)
            temp = corrcoef(df_temp(xi,:),df_temp(yi,:));
            grid_cc(xi,yi) = temp(1,2);
        else
            grid_cc(xi,yi) = 0;
        end
    end
    xi
end

% remove diagnal
grid_cc = grid_cc+grid_cc';
for i = 1:size(grid_cc,1)
    grid_cc(i,i)= 0;
end
imagesc(grid_cc)

% remove zeros
mm_idx2 = find(mean(abs(grid_cc))>0);
grid_cc2 = grid_cc(mm_idx2, mm_idx2 );
imagesc(grid_cc2)

%% dendrogram
%= Calculate pairwise distances and linkage
dist = pdist(grid_cc2, 'euclidean');
Z = linkage(dist, 'average');
order = optimalleaforder(Z, dist);
clear('dist');
figure
[lineH, T, Perm] = dendrogram(Z,0,'Orientation','Left', 'r', order);
axis off

T2 = cluster(Z,'maxclust',2);   % cluster into two networks
T2_idx(1).idx = Perm(T2==1);
T2_idx(2).idx = Perm(T2==2);

nn = 2;
% save idx
cc_idx = [];
figure
for i = 1:nn
    idx = T2_idx(i).idx;
    idx2 = [];
    cc_idx(i) = length(idx);
    im_temp = region_mask*0.5;
    for ii = 1:length(idx)
        % convert idx back to that before removing zeros
        idx2(ii) = mm_idx2(idx(ii));
        xi = floor((idx2(ii)-1)/grid_num)+1;
        yi = mod(idx2(ii),grid_num);
        if yi == 0
            yi = grid_num;
        end
        XX = round(x0+(xi-1)*dx):round(x0+(xi)*dx);
        YY = round(y0+(yi-1)*dy):round(y0+(yi)*dy);
        im_temp(YY,XX) = 1;
    end
    
    subplot(2,1,i)
    im_temp2 = im_temp.*region_mask;
    %im_temp2(im_temp2<0.1)=nan;
    imagesc(im_temp2)
    axis off
    if i ==1
        c1 = im_temp2;
    else
        c2 = im_temp2;
    end
end


